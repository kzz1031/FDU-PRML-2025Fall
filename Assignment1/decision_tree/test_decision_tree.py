"""
decision tree test
"""

import pandas as pd
from decision_tree import DecisionTreeClassifier
from viz_tree import plot_tree
import matplotlib.pyplot as plt
from pathlib import Path

def test_dt_classification():
	# Load iris train/test CSV generated by iris_download.py
	data_dir = Path(__file__).parent / 'dataset'
	train_path = data_dir / 'iris_train.csv'
	test_path = data_dir / 'iris_test.csv'

	if not train_path.exists() or not test_path.exists():
		raise FileNotFoundError("iris_train.csv / iris_test.csv not found. Run iris_download.py first.")

	df_train = pd.read_csv(train_path)
	df_test = pd.read_csv(test_path)

	feature_names = list(df_train.columns[:-1])
	X = df_train[feature_names].to_numpy(dtype=float)
	y = df_train['label'].to_numpy(dtype=int)
	X_test = df_test[feature_names].to_numpy(dtype=float)
	y_test = df_test['label'].to_numpy(dtype=int)

	criteria = ["info_gain", "info_gain_ratio", "gini", "error_rate"]
	# criteria = ["info_gain"]
	max_depths = [4, 5, 6, 7]
	min_samples_splits = [2, 3, 4, 5]
	min_impurity_splits = [0.0, 1e-4, 1e-3, 1e-2]
	# Expect relatively high accuracy on iris (simple dataset). Threshold conservative.
	min_acc = 0.85
	# for max_depth in max_depths:
	# 	for min_samples_split in min_samples_splits:
	# 		for min_impurity_split in min_impurity_splits:
	# 			print(f"\n=== Criterion: info_gain, max_depth: {max_depth}, min_samples_split: {min_samples_split}, min_impurity_split: {min_impurity_split} ===")
	# 			dt_clf = DecisionTreeClassifier(criterion="info_gain", random_state=0, max_depth=max_depth, min_samples_split=min_samples_split, min_impurity_split=min_impurity_split, max_features=2)
	# 			dt_clf.fit(X, y)
	# 			preds = dt_clf.predict(X_test)
	# 			acc = (preds == y_test).mean()
	# 			print(f"Accuracy: {acc:.4f}")
	for crit in criteria:
		print(f"\n=== Criterion: {crit} ===")
		dt_clf = DecisionTreeClassifier(criterion=crit, random_state=0, max_depth=7, min_samples_split=2, min_impurity_split=0.1, max_features=None)
		dt_clf.fit(X, y)
		preds = dt_clf.predict(X_test)
		acc = (preds == y_test).mean()
		print(f"Accuracy: {acc:.4f}")
		if acc < min_acc:
			raise AssertionError(f"Accuracy {acc:.4f} below threshold {min_acc} for criterion {crit}")
		fig, ax = plot_tree(dt_clf,
							 feat_names=feature_names,
							 class_names=["0", "1", "2"],
							 show_split_score=True,
							 show_leaf_samples=True,
							 top_padding=0.18)
		ax.set_title(f"Decision Tree ({crit}) acc={acc:.2f}")
		plt.savefig(f"output/iris_{crit}.png")


if __name__ == '__main__':
	test_dt_classification()
